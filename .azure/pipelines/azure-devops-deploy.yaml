trigger:
  batch: true
  branches:
    include:
    - 'master'
    - 'development'

pool:
  vmImage: 'windows-latest'

jobs:
- job: Release
  condition:
    and(succeeded(),
        in(variables['Build.SourceBranchName'], 'master'),
        in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'))
  steps:
  - task: Npm@1
    displayName: 'NPM Install'
    inputs:
      command: 'install'
      workingDir: '$(Build.SourcesDirectory)'
  - task: Npm@1
    displayName: 'NPM Clean'
    inputs:
      command: 'custom'
      workingDir: '$(Build.SourcesDirectory)'
      customCommand: 'run clean'
  - task: Npm@1
    displayName: 'NPM Build'
    inputs:
      command: 'custom'
      workingDir: '$(Build.SourcesDirectory)'
      customCommand: 'run build'
  - task: ArchiveFiles@2
    displayName: Archive
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
      verbose: true
  - task: AzureRmWebAppDeployment@4
    displayName: 'Azure App Service Deploy'
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Azure'
      WebAppName: 'Creeper-Bot'
      packageForLinux: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      enableCustomDeployment: true
      RemoveAdditionalFilesFlag: true

- job: Debug
  condition:
    and(succeeded(),
        in(variables['Build.SourceBranchName'], 'development'),
        in(variables['Build.Reason'], 'Manual', 'IndividualCI', 'BatchedCI'))
  steps:
  - task: Npm@1
    displayName: 'NPM Install'
    inputs:
      command: 'install'
      workingDir: '$(Build.SourcesDirectory)'
  - task: Npm@1
    displayName: 'NPM Clean'
    inputs:
      command: 'custom'
      workingDir: '$(Build.SourcesDirectory)'
      customCommand: 'run clean'
  - task: Npm@1
    displayName: 'NPM Build'
    inputs:
      command: 'custom'
      workingDir: '$(Build.SourcesDirectory)'
      customCommand: 'run build'
  - task: ArchiveFiles@2
    displayName: Archive
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
      verbose: true